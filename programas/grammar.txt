/*
	Declarações globais de variáveis simples e vetores.
*/

int: var1;
int: var2[100];
float: var3;
float: var4[100];
char: var5;
char: var6[100];
bool: var7;
bool: var8[100];
string: var9;
string: var10[100];


/*
	Declarações de funções com 0 ou mais parâmetros.
*/

//fun1: Atribuições
int:fun1(){
	var1 = var1;
	var1[100] = var1;
	var1[var1 + 100 * fun1()] = var1;

	var1 = var1[100];
	var1 = var1[var1 + 100 * fun2()];
	var1 = var1 + 100 + (var1[100] + 100 + fun1());
}

//fun2: entrada saida e retorno
float:fun2(int:arg1){
	//Entrada:
	input var1;
	input var1[(100 + var2) + fun1()];

	//Saida:
	output var1;
	output var1, var1[100], var1[(var2) + fun1()];
	output "um", var1 + 100, "tres", var1[100], "quatro", fun1() * var1[(100) + fun1()], "";

	//Retorno:
	return var1;
	return var1[(100 + var2) + fun1()];
	return (var1 + 100) / fun1();
}

//fun3: comandos vazios e blocos
char:fun3(int:arg1, float:arg2){
	//Comandos vazios:
	;;;;;;;;;

	//Blocos:
	{};
	{
	};
	{
		var1 = fun1(par1, par2);
		output "sim";
	};
}

//fun4: controle de fluxo
bool:fun4(int:arg1, float:arg2, char:arg3){
//Expressões booleanas:

	//Controle de fluxo:
	if(true) then {
		var1 = var1[100] + 100;
	};
	if(true) then {
		var1 = var1[100] + 100;
	} else {
		var1 = var1[100] + 100;
	};
	while(true) do {
		var1 = var1[100] + 100;
	};
	do {
		var1 = var1[100] + 100;
	} while(true);
	if(true) then var1 = var1[100] + 100;
	if(true) then var1 = var1[100] + 100 else var1 = var1[100] + 100;
	while(true) do var1 = var1[100] + 100;
	do var1 = var1[100] + 100 while(true);

	if(true && true) then input var1 else if(100 <= 100) then if(true || true) then var1 = var1 else input var;
}

//fun5: declaração de variáveis locais
string:fun5(int:arg1, float:arg2, char:arg3, bool:arg4)
int: var1;
float: var1;
string: var1;
{

}

//fun6: chamada de funcoes
string:fun5(string:arg1, string:arg2, string:arg3, string:arg4, string:arg5, string:arg6, string:arg7, string:arg8, string:arg9, string:arg10)
string: var1;
string: var1;
string: var1;
string: var1;
string: var1;
string: var1;
{
	fun1();
	fun2(par1);
	fun3(par1, par2);
	fun4(par1, par2, par3);
	fun5(par1, par2, par3, par4);
}

//fun7: expressões lógicas
bool:fun7(int:arg1, float:arg2, char:arg3){
	//Expressões booleanas:
	if(true) then {};
	if(false) then {};
	if(true || false) then {};
	if(false && (false || true)) then {};

	if(var1) then {};
	if((var1)) then {};
	if(var1[100] || false && (false || true) || var1) then {};

	if(100 <= 100) then {};
	if((100 <= 100) && (100 >= 100) || true) then {};
	if(((100 <= 100) || (var1 <= 100)) && (100 >= var2) || var3 || true) then {};
	if((100 + 100 || 100) && var3 || true) then {};
}
